{
    "mice_in": {
        "ice_tests": {
            "description": "Flag for box test. 0 indicates no box test.",
            "validators": [
                "@field_validator('ice_tests')\n@classmethod\ndef validate_ice_tests(cls, v):\n    if not isinstance(v, int) or v not in [0, 1]:\n        raise ValueError('ice_tests must be 0 or 1')\n    return v"
            ],
            "cross_validators": []
        },
        "ihot_mice": {
            "description": "Start mode for ice model. 0: cold start, 1: restart, 2: hotstart from HYCOM.",
            "validators": [
                "@field_validator('ihot_mice')\n@classmethod\ndef validate_ihot_mice(cls, v):\n    if not isinstance(v, int) or v not in [0, 1, 2]:\n        raise ValueError('ihot_mice must be 0, 1, or 2')\n    return v"
            ],
            "cross_validators": []
        },
        "ice_advection": {
            "description": "Ice advection scheme. 3: upwind, 4: center-difference, 5: tvd, 6: tvd-up, 7: TVD_Casulli.",
            "validators": [
                "@field_validator('ice_advection')\n@classmethod\ndef validate_ice_advection(cls, v):\n    if not isinstance(v, int) or v not in range(3, 8):\n        raise ValueError('ice_advection must be an integer between 3 and 7')\n    return v"
            ],
            "cross_validators": []
        },
        "ice_therm_on": {
            "description": "Flag for ice thermodynamics. 1: on, 0: off.",
            "validators": [
                "@field_validator('ice_therm_on')\n@classmethod\ndef validate_ice_therm_on(cls, v):\n    if not isinstance(v, int) or v not in [0, 1]:\n        raise ValueError('ice_therm_on must be 0 or 1')\n    return v"
            ],
            "cross_validators": []
        },
        "ievp": {
            "description": "Elastic-Viscous-Plastic (EVP) model selection. 1: EVP, 2: modified EVP (mEVP).",
            "validators": [
                "@field_validator('ievp')\n@classmethod\ndef validate_ievp(cls, v):\n    if not isinstance(v, int) or v not in [1, 2]:\n        raise ValueError('ievp must be 1 or 2')\n    return v"
            ],
            "cross_validators": []
        },
        "ice_cutoff": {
            "description": "Cut-off thickness [m] or fraction for ice. No ice velocity if ice thickness <= ice_cutoff.",
            "validators": [
                "@field_validator('ice_cutoff')\n@classmethod\ndef validate_ice_cutoff(cls, v):\n    if not isinstance(v, float) or v < 0:\n        raise ValueError('ice_cutoff must be a non-negative float')\n    return v"
            ],
            "cross_validators": []
        },
        "evp_rheol_steps": {
            "description": "Number of subcycling steps in EVP.",
            "validators": [
                "@field_validator('evp_rheol_steps')\n@classmethod\ndef validate_evp_rheol_steps(cls, v):\n    if not isinstance(v, int) or v <= 0:\n        raise ValueError('evp_rheol_steps must be a positive integer')\n    return v"
            ],
            "cross_validators": []
        },
        "mevp_rheol_steps": {
            "description": "Number of iterations in modified EVP (mEVP).",
            "validators": [
                "@field_validator('mevp_rheol_steps')\n@classmethod\ndef validate_mevp_rheol_steps(cls, v):\n    if not isinstance(v, int) or v <= 0:\n        raise ValueError('mevp_rheol_steps must be a positive integer')\n    return v"
            ],
            "cross_validators": []
        },
        "delta_min": {
            "description": "Limit for minimum divergence (1/s). Used in both VP and EVP.",
            "validators": [
                "@field_validator('delta_min')\n@classmethod\ndef validate_delta_min(cls, v):\n    if not isinstance(v, float) or v <= 0:\n        raise ValueError('delta_min must be a positive float')\n    return v"
            ],
            "cross_validators": []
        },
        "theta_io": {
            "description": "Ice/ocean rotation angle in degrees.",
            "validators": [
                "@field_validator('theta_io')\n@classmethod\ndef validate_theta_io(cls, v):\n    if not isinstance(v, float) or v < 0 or v >= 360:\n        raise ValueError('theta_io must be a float between 0 and 360')\n    return v"
            ],
            "cross_validators": []
        },
        "mevp_alpha1": {
            "description": "Constant used in mEVP for constitutive equation.",
            "validators": [
                "@field_validator('mevp_alpha1')\n@classmethod\ndef validate_mevp_alpha1(cls, v):\n    if not isinstance(v, float) or v <= 0:\n        raise ValueError('mevp_alpha1 must be a positive float')\n    return v"
            ],
            "cross_validators": []
        },
        "mevp_alpha2": {
            "description": "Constant used in mEVP for momentum equation.",
            "validators": [
                "@field_validator('mevp_alpha2')\n@classmethod\ndef validate_mevp_alpha2(cls, v):\n    if not isinstance(v, float) or v <= 0:\n        raise ValueError('mevp_alpha2 must be a positive float')\n    return v"
            ],
            "cross_validators": []
        },
        "pstar": {
            "description": "Ice strength parameter [N/m^2].",
            "validators": [
                "@field_validator('pstar')\n@classmethod\ndef validate_pstar(cls, v):\n    if not isinstance(v, float) or v <= 0:\n        raise ValueError('pstar must be a positive float')\n    return v"
            ],
            "cross_validators": []
        },
        "ellipse": {
            "description": "Ellipticity parameter for ice rheology.",
            "validators": [
                "@field_validator('ellipse')\n@classmethod\ndef validate_ellipse(cls, v):\n    if not isinstance(v, float) or v <= 1:\n        raise ValueError('ellipse must be a float greater than 1')\n    return v"
            ],
            "cross_validators": []
        },
        "c_pressure": {
            "description": "Ice pressure coefficient [-].",
            "validators": [
                "@field_validator('c_pressure')\n@classmethod\ndef validate_c_pressure(cls, v):\n    if not isinstance(v, float) or v <= 0:\n        raise ValueError('c_pressure must be a positive float')\n    return v"
            ],
            "cross_validators": []
        },
        "niter_fct": {
            "description": "Number of iterations in higher-order solve for FCT (Flux-Corrected Transport).",
            "validators": [
                "@field_validator('niter_fct')\n@classmethod\ndef validate_niter_fct(cls, v):\n    if not isinstance(v, int) or v <= 0:\n        raise ValueError('niter_fct must be a positive integer')\n    return v"
            ],
            "cross_validators": []
        },
        "ice_gamma_fct": {
            "description": "Smoothing parameter for FCT.",
            "validators": [
                "@field_validator('ice_gamma_fct')\n@classmethod\ndef validate_ice_gamma_fct(cls, v):\n    if not isinstance(v, float) or v < 0 or v > 1:\n        raise ValueError('ice_gamma_fct must be a float between 0 and 1')\n    return v"
            ],
            "cross_validators": []
        },
        "h_ml0": {
            "description": "Initial ocean mixed layer depth [m].",
            "validators": [
                "@field_validator('h_ml0')\n@classmethod\ndef validate_h_ml0(cls, v):\n    if not isinstance(v, float) or v <= 0:\n        raise ValueError('h_ml0 must be a positive float')\n    return v"
            ],
            "cross_validators": []
        },
        "salt_ice": {
            "description": "Salinity for ice [PSU].",
            "validators": [
                "@field_validator('salt_ice')\n@classmethod\ndef validate_salt_ice(cls, v):\n    if not isinstance(v, float) or v < 0:\n        raise ValueError('salt_ice must be a non-negative float')\n    return v"
            ],
            "cross_validators": []
        },
        "salt_water": {
            "description": "Salinity for water [PSU].",
            "validators": [
                "@field_validator('salt_water')\n@classmethod\ndef validate_salt_water(cls, v):\n    if not isinstance(v, float) or v < 0:\n        raise ValueError('salt_water must be a non-negative float')\n    return v"
            ],
            "cross_validators": []
        }
    }
}