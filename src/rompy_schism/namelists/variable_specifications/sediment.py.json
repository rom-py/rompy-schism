{
    "sed_core": {
        "sd50": {
            "description": "Median sediment grain diameter (D50) for each sediment tracer, specified in millimeters. This is a list of values corresponding to the number of sediment tracers (Ntracers).",
            "validators": [
                "@field_validator('sd50')\n@classmethod\ndef validate_sd50(cls, v):\n    if not all(isinstance(x, (int, float)) and x > 0 for x in v):\n        raise ValueError('All Sd50 values must be positive numbers')\n    return v"
            ],
            "cross_validators": []
        },
        "erate": {
            "description": "Surface erosion rate for each sediment tracer. The interpretation and units depend on the 'ierosion' parameter. If ierosion=0, the units are kg/m\u00b2/s. If ierosion=1, the units are s/m (as per M_E in Winterwerp et al. 2012, JGR, vol 117).",
            "validators": [
                "@field_validator('erate')\n@classmethod\ndef validate_erate(cls, v):\n    if not all(isinstance(x, (int, float)) and x >= 0 for x in v):\n        raise ValueError('All Erate values must be non-negative numbers')\n    return v"
            ],
            "cross_validators": [
                "@model_validator(mode='after')\ndef validate_erate_length(self):\n    if len(self.erate) != len(self.sd50):\n        raise ValueError('Erate and Sd50 must have the same number of elements')\n    return self"
            ]
        }
    },
    "sed_opt": {
        "isedtype": {
            "description": "Sediment type for each class. 0: MUD-like (suspension only), 1: SAND-like (suspension + bedload), 2: GRAVEL-like (not available)",
            "validators": [
                "@field_validator('isedtype')\n@classmethod\ndef validate_isedtype(cls, v):\n    if not all(0 <= x <= 1 for x in v):\n        raise ValueError('isedtype values must be 0 or 1')\n    return v"
            ],
            "cross_validators": []
        },
        "srho": {
            "description": "Sediment grain density (kg/m3) for each sediment class",
            "validators": [
                "@field_validator('srho')\n@classmethod\ndef validate_srho(cls, v):\n    if any(x <= 0 for x in v):\n        raise ValueError('srho values must be positive')\n    return v"
            ],
            "cross_validators": []
        },
        "comp_ws": {
            "description": "Flag to enable/disable computation of sediment settling velocity. 0: Disabled (user-defined), 1: Enabled (computed from SAND_SD50 and SAND_SRHO)",
            "validators": [
                "@field_validator('comp_ws')\n@classmethod\ndef validate_comp_ws(cls, v):\n    if v not in [0, 1]:\n        raise ValueError('comp_ws must be 0 or 1')\n    return v"
            ],
            "cross_validators": []
        },
        "comp_tauce": {
            "description": "Flag to enable/disable computation of sediment critical shear stress. 0: Disabled (user-defined), 1: Enabled (computed from SAND_SD50 and SAND_SRHO)",
            "validators": [
                "@field_validator('comp_tauce')\n@classmethod\ndef validate_comp_tauce(cls, v):\n    if v not in [0, 1]:\n        raise ValueError('comp_tauce must be 0 or 1')\n    return v"
            ],
            "cross_validators": []
        },
        "wsed": {
            "description": "Particle settling velocity (mm/s) for each sediment class",
            "validators": [
                "@field_validator('wsed')\n@classmethod\ndef validate_wsed(cls, v):\n    if any(x < 0 for x in v):\n        raise ValueError('wsed values must be non-negative')\n    return v"
            ],
            "cross_validators": [
                "@model_validator(mode='after')\ndef check_wsed_comp_ws(self):\n    if self.comp_ws == 1 and any(self.isedtype[i] == 1 for i in range(len(self.isedtype))):\n        print('Warning: wsed values will be overwritten for SAND-like classes when comp_ws=1')"
            ]
        },
        "tau_ce": {
            "description": "Critical shear stress for erosion (Pa) for each sediment class",
            "validators": [
                "@field_validator('tau_ce')\n@classmethod\ndef validate_tau_ce(cls, v):\n    if any(x < 0 for x in v):\n        raise ValueError('tau_ce values must be non-negative')\n    return v"
            ],
            "cross_validators": [
                "@model_validator(mode='after')\ndef check_tau_ce_comp_tauce(self):\n    if self.comp_tauce == 1 and any(self.isedtype[i] == 1 for i in range(len(self.isedtype))):\n        print('Warning: tau_ce values will be overwritten for SAND-like classes when comp_tauce=1')"
            ]
        },
        "sed_debug": {
            "description": "Debug flag. 0: silent, 1: output variables to outputs/nonfatal_*",
            "validators": [
                "@field_validator('sed_debug')\n@classmethod\ndef validate_sed_debug(cls, v):\n    if v not in [0, 1]:\n        raise ValueError('sed_debug must be 0 or 1')\n    return v"
            ],
            "cross_validators": []
        },
        "ised_dump": {
            "description": "Dumping/dredging option. 0: no, 1: needs input sed_dump.in",
            "validators": [
                "@field_validator('ised_dump')\n@classmethod\ndef validate_ised_dump(cls, v):\n    if v not in [0, 1]:\n        raise ValueError('ised_dump must be 0 or 1')\n    return v"
            ],
            "cross_validators": []
        },
        "bedload": {
            "description": "Bedload transport formula. 0: Disabled, 1: van Rijn (2007), 3: Soulsby and Damgaard (2005), 4: Wu and Lin (2014)",
            "validators": [
                "@field_validator('bedload')\n@classmethod\ndef validate_bedload(cls, v):\n    if v not in [0, 1, 3, 4]:\n        raise ValueError('bedload must be 0, 1, 3, or 4')\n    return v"
            ],
            "cross_validators": []
        },
        "bedload_filter": {
            "description": "Flag to enable/disable diffusive filter for bedload fluxes. 0: Disabled, 1: Enabled",
            "validators": [
                "@field_validator('bedload_filter')\n@classmethod\ndef validate_bedload_filter(cls, v):\n    if v not in [0, 1]:\n        raise ValueError('bedload_filter must be 0 or 1')\n    return v"
            ],
            "cross_validators": []
        },
        "bedload_limiter": {
            "description": "Flag to enable/disable limiting of bedload flux components. 0: Disabled, 1: Enabled",
            "validators": [
                "@field_validator('bedload_limiter')\n@classmethod\ndef validate_bedload_limiter(cls, v):\n    if v not in [0, 1]:\n        raise ValueError('bedload_limiter must be 0 or 1')\n    return v"
            ],
            "cross_validators": []
        },
        "suspended_load": {
            "description": "Flag to enable/disable suspended load transport. 0: Disabled, 1: Enabled",
            "validators": [
                "@field_validator('suspended_load')\n@classmethod\ndef validate_suspended_load(cls, v):\n    if v not in [0, 1]:\n        raise ValueError('suspended_load must be 0 or 1')\n    return v"
            ],
            "cross_validators": []
        }
    }
}